// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { IMovie, IMovies } from "../types/movie";




const API_KEY = import.meta.env.VITE_API_KEY;
const API_URL = import.meta.env.VITE_DISCOVER_URL;
const SEARCH_URL = import.meta.env.VITE_SEARCH_URL;
// Define a service using a base URL and expected endpoints
export const moviesApiSlice = createApi({
  baseQuery: fetchBaseQuery({
    baseUrl: API_URL,
    prepareHeaders: (headers) => {
      // Add your API key here
      headers.set("Authorization", `Bearer ${API_KEY}`);
      return headers;
    },
  }),
  reducerPath: "movieApi",

  // Tag types are used for caching and invalidation.
  tagTypes: ["Movies"],

  endpoints: (build) => ({
    // Supply generics for the return type (in this case `Movies`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getMovies: build.query<IMovies, number>({
      query: (page = 0) => `discover/movie?api_key=${API_KEY}&page=${page}`,
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error, id) => [{ type: "Movies", id }],
    }),
    getMovieData: build.query<IMovie, number>({
      query: (id) => `movie/${id}?api_key=${API_KEY}`,
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error, id) => [{ type: "Movies", id }],
    }),
    searchMovies: build.query<IMovies, string>({
      query: (query) => `search/movie?api_key=${API_KEY}&query=${query}`,
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error, id) => [{ type: "Movies", id }],
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useGetMoviesQuery, useGetMovieDataQuery, useSearchMoviesQuery } =
  moviesApiSlice;
